buildscript {
    // Make sure to use the same AGP as the main project.
    def androidGradlePlugin = '7.0.2'
    /**
     * Calculates the right lint version for the provided AGP version. AGP is tightly coupled with
     * Android Lint because it implements LintClient. The formula to calculate the lint version
     * relative to AGP is: AGP version + 23.
     *
     * E.g. AGP version 4.2.1 -> Android Lint version 27.2.1
     */
    def androidLintVersion = { agpVersion ->
        def (majorVersion, minorAndPatchVersion) = agpVersion.split("\\.", 2)
        int lintMajorVersion = (majorVersion as Integer) + 23
        return "$lintMajorVersion.$minorAndPatchVersion"
    }
    ext.versions = [
        androidGradlePlugin     : androidGradlePlugin,
        androidLint             : androidLintVersion(androidGradlePlugin),
        compileSdk              : 30,
        minSdk                  : 14,
        targetSdk               : 30,
        kotlin                  : '1.5.30',
        kotlinCoroutines        : '1.5.2',
        kotlinMetadataJvm       : '0.3.0',
        ksp                     : '1.5.30-1.0.0',
        androidxAppcompat       : '1.3.1',
        androidxConstraintlayout: '2.1.0',
        androidxFragment        : '1.3.6',
        androidxLifecycle       : '2.3.1',
        androidxNavigation      : '2.3.5',
        androidxRoom            : '2.3.0',
        androidxTestCore        : '1.4.0',
        androidxTestRunner      : '1.4.0',
        androidxTestJunit       : '1.1.3',
        androidxTestEspresso    : '3.4.0',
        autoService             : '1.0',
        okhttp                  : '4.9.1',
        dagger                  : '2.38.1',
        kotlinPoet              : '1.9.0',
        thrift                  : '0.13.0',
        dexmaker                : '2.28.1',
        mockito                 : '3.12.4',
        mockitoKotlin           : '3.2.0',
        mockk                   : '1.12.0',
        robolectric             : '4.6.1',
        dokka                   : '1.5.0',
    ]
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${versions.androidGradlePlugin}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "com.google.devtools.ksp:symbol-processing-gradle-plugin:${versions.ksp}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokka}"
    }
}

plugins {
    id 'io.codearte.nexus-staging' version '0.30.0'
}

allprojects {
    group = 'com.linecorp.lich'
    repositories {
        google()
        mavenCentral()
    }
    // Avoid '/META-INF/*.kotlin_module' conflicts.
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += ['-module-name', "com_linecorp_lich_${project.name}"]
        }
    }
    afterEvaluate {
        if (ext.has('publication')) {
            afterEvaluate {
                configurePublication(project, ext.publication)
            }
        }
    }
}

private configurePublication(project, publication) {
    configure(project) {
        switch (publication.type) {
            case 'jar':
                task sourcesJar(type: Jar) {
                    archiveClassifier = 'sources'
                    from sourceSets.main.allSource
                }
                task javadocJar(type: Jar) {
                    archiveClassifier = 'javadoc'
                    from dokkaJavadoc
                }
                publishing {
                    publications {
                        maven(MavenPublication) {
                            from components.java
                            artifact sourcesJar
                            artifact javadocJar
                        }
                    }
                }
                break
            case 'aar':
                task sourcesJar(type: Jar) {
                    archiveClassifier = 'sources'
                    from android.sourceSets.main.java.srcDirs
                }
                task javadocJar(type: Jar) {
                    archiveClassifier = 'javadoc'
                    from dokkaJavadoc
                }
                publishing {
                    publications {
                        maven(MavenPublication) {
                            from components.release
                            artifact sourcesJar
                            artifact javadocJar
                        }
                    }
                }
                break
            default:
                throw new InvalidUserDataException("Unknown publication type: $publication.type")
        }
        publishing {
            publications {
                maven(MavenPublication) {
                    pom {
                        name = publication.name
                        description = publication.description
                        url = publication.url
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution = 'repo'
                            }
                        }
                        developers {
                            developer {
                                name = 'LINE Corporation'
                                email = 'dl_oss_dev@linecorp.com'
                                url = 'https://engineering.linecorp.com/en/'
                            }
                        }
                        scm {
                            connection = 'scm:git:https://github.com/line/lich.git'
                            developerConnection = 'scm:git:https://github.com/line/lich.git'
                            url = 'https://github.com/line/lich'
                        }
                        issueManagement {
                            system = 'GitHub'
                            url = 'https://github.com/line/lich/issues'
                        }
                    }
                }
            }
            repositories {
                maven {
                    url = findProperty('repositoryUrl') ?: project.version.endsWith('SNAPSHOT') ?
                        'https://oss.sonatype.org/content/repositories/snapshots/' :
                        'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                    credentials {
                        username = findProperty('repositoryUsername') ?: ''
                        password = findProperty('repositoryPassword') ?: ''
                    }
                }
            }
        }
        signing {
            def signingKey = findProperty('signingKey')
            def signingPassword = findProperty('signingPassword')
            required { signingKey != null && signingPassword != null }
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications.maven
        }
    }
}

nexusStaging {
    packageGroup = 'com.linecorp'
    stagingProfileId = '465b0f4eecd582'
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
